<Project>

    <!-- restore tool -->
    <Target Name="_ObfuscarGlobalToolRestore"
            BeforeTargets="Restore">
        <Exec
                Condition="'$(ObfuscarBuild)' == 'true' and '$(ObfuscarGlobalToolRestored)'=='false'"
                ConsoleToMsBuild="true"
                UseUtf8Encoding="Always"
                Command="dotnet tool restore">
        </Exec>
        <PropertyGroup Condition="'$(ObfuscarGlobalToolRestored)' == 'false'">
            <ObfuscarGlobalToolRestored>true</ObfuscarGlobalToolRestored>
        </PropertyGroup>
    </Target>

    <!-- check tool -->
    <Target Name="_ObfuscarGlobalToolCheckPrerequisites">
        <!-- check local -->
        <Exec
                ConsoleToMsBuild="true"
                UseUtf8Encoding="Always"
                Command="dotnet tool list Obfuscar.GlobalTool">
            <Output TaskParameter="ConsoleOutput" PropertyName="ObfuscarGlobalToolLocalCheckOutput"/>
        </Exec>
        <PropertyGroup Condition="$(ObfuscarGlobalToolLocalCheckOutput.IndexOf('obfuscar.console')) != -1">
            <ObfuscarGlobalToolExists>1</ObfuscarGlobalToolExists>
        </PropertyGroup>
        <Message
                Condition="$(ObfuscarGlobalToolExists)==1"
                Text="The project '$(ProjectName)' found Obfuscar.GlobalTool in local"
                Importance="high"
        />

        <!-- check global -->
        <Exec
                Condition="$(ObfuscarGlobalToolExists) != 1"
                ConsoleToMsBuild="true"
                UseUtf8Encoding="Always"
                Command="dotnet tool list -g Obfuscar.GlobalTool">
            <Output TaskParameter="ConsoleOutput" PropertyName="ObfuscarGlobalToolGlobalCheckOutput"/>
        </Exec>
        <PropertyGroup Condition="$(ObfuscarGlobalToolGlobalCheckOutput.IndexOf('obfuscar.console')) != -1">
            <ObfuscarGlobalToolExists>0</ObfuscarGlobalToolExists>
        </PropertyGroup>
        <Message
                Condition="$(ObfuscarGlobalToolExists)==0"
                Text="The project '$(ProjectName)' found Obfuscar.GlobalTool in global"
                Importance="high"
        />

        <!-- Raise an error if we're unable to find Obfuscator.GlobalTool -->
        <Error
                Condition="$(ObfuscarGlobalToolExists) != 1 AND $(ObfuscarGlobalToolExists) != 0"
                Text="Not found 'Obfuscator.GlobalTool',please install it,see https://www.nuget.org/packages/Obfuscar.GlobalTool ."/>
    </Target>

    <!-- generate `AssemblySearchPath` config file -->
    <Target
            Name="_ObfuscarGetAssemblySearchPaths"
            BeforeTargets="ObfuscarTask"
            DependsOnTargets="_ObfuscarConfigFileCreate">
        <ItemGroup Condition="'$(AssemblySearchNames)' != ''">
            <_ReferenceItems Include="@(ReferencePath)">
                <Name>$([System.IO.Path]::GetFileName('%(Identity)'))</Name>
                <Path>$([System.IO.Path]::GetDirectoryName('%(Identity)'))</Path>
            </_ReferenceItems>
            <ReferenceItems Include="%(_ReferenceItems.Path)" Condition="$(AssemblySearchNames.Contains('%(_ReferenceItems.Name)'))" />

            <AssemblySearchLines Include="@(ReferenceItems)">
                <Line><![CDATA[    <AssemblySearchPath path='%(Identity)' />]]></Line>
            </AssemblySearchLines>
        </ItemGroup>

        <Message Text="AssemblySearchLines:" Importance="high" />
        <Message Text="@(AssemblySearchLines->'%(Line)', '%0D%0A')" Importance="high" />

        <PropertyGroup Condition="'$(AssemblySearchNames)' != ''">
            <ObfuscarAssembliesContents><![CDATA[<?xml version="1.0"?>
<Include>
@(AssemblySearchLines->'%(Line)', '%0D%0A')
</Include>]]>
            </ObfuscarAssembliesContents>
        </PropertyGroup>
        <PropertyGroup Condition="'$(AssemblySearchNames)' == ''">
            <ObfuscarAssembliesContents><![CDATA[<?xml version="1.0"?>
<Include>
    <AssemblySearchPath path='.' />
</Include>]]>
            </ObfuscarAssembliesContents>
        </PropertyGroup>

        <WriteLinesToFile
                Overwrite="true"
                File="$(OutputPath)\$(ObfuscarAssembliesName)"
                Lines="$(ObfuscarAssembliesContents)" />
    </Target>

    <!-- generate obfuscar config file -->
    <Target Name="_ObfuscarConfigFileCreate"
            BeforeTargets="ObfuscarTask"
            DependsOnTargets="_ObfuscarTask">

        <PropertyGroup>
            <ObfuscarConfigPath>$(ProjectDir)\$(ObfuscarConfigName)</ObfuscarConfigPath>
        </PropertyGroup>
        <PropertyGroup Condition="'$(ObfuscarAssembliesInclude)' == 'true'">
            <ObfuscarAssembliesIncludeContent>
                <Include path="$(ObfuscarAssembliesName)" />
            </ObfuscarAssembliesIncludeContent>
        </PropertyGroup>
        <PropertyGroup Condition="'$(ObfuscarAssembliesInclude)' != 'true'">
            <ObfuscarAssembliesIncludeContent />
        </PropertyGroup>

        <PropertyGroup>
            <ObfuscarContents>
                <![CDATA[<?xml version="1.0"?>
<Obfuscator>
  <!-- https://docs.obfuscar.com/getting-started/configuration -->
  <!-- https://github.com/obfuscar/obfuscar/blob/master/Obfuscar/Settings.cs -->
  
  <Var name="InPath" value="." />
  <Var name="OutPath" value=".\$(ObfuscatedDir)" />
  <Var name="RenameFields" value="true" />
  <Var name="RenameProperties" value="true" />
  <Var name="RenameEvents" value="true" />
  <Var name="KeepPublicApi" value="true" />
  <Var name="HidePrivateApi" value="true" />
  <Var name="ReuseNames" value="true" />
  <Var name="UseUnicodeNames" value="false" />
  <Var name="UseKoreanNames" value="false" />
  <Var name="HideStrings" value="false" />
  <Var name="OptimizeMethods" value="true" />
  <Var name="SuppressIldasm" value="false" />

  <Module file="$(TargetFileName)">
    <SkipEnums value="true" />
  </Module>
  
  <!-- <Include path="$(ObfuscarAssembliesName)" /> -->
  $(ObfuscarAssembliesIncludeContent)
</Obfuscator>]]>
            </ObfuscarContents>
        </PropertyGroup>

        <WriteLinesToFile
                Condition="!Exists($(ObfuscarConfigPath))"
                Overwrite="true"
                File="$(ObfuscarConfigPath)"
                Lines="$(ObfuscarContents)" />
    </Target>
    
    <Target Name="_ObfuscarTask"
            Condition="'$(TargetFramework)' != ''"
            DependsOnTargets="_ObfuscarGlobalToolCheckPrerequisites">
        <PropertyGroup Condition="$(ObfuscarGlobalToolExists) == 0">
            <ObfuscateCommand>obfuscar.console $(ObfuscarConfigName)</ObfuscateCommand>
        </PropertyGroup>
        <PropertyGroup Condition="$(ObfuscarGlobalToolExists) == 1">
            <ObfuscateCommand>dotnet obfuscar.console $(ObfuscarConfigName)</ObfuscateCommand>
        </PropertyGroup>
    </Target>

    <Target Name="ObfuscarTask"
            AfterTargets="AfterBuild"
            BeforeTargets="PackTask"
            DependsOnTargets="_ObfuscarTask"
            Condition="'$(ObfuscarBuild)'=='true' and '$(TargetFramework)' != ''">

        <PropertyGroup>
            <ObfuscarConfigPath>$(ProjectDir)\$(ObfuscarConfigName)</ObfuscarConfigPath>
        </PropertyGroup>
        
        <Copy
                SourceFiles="$(ObfuscarConfigPath)"
                DestinationFiles="$(OutputPath)\$(ObfuscarConfigName)"
                SkipUnchangedFiles="true"/>
        <MakeDir 
                Condition="!Exists('$(OutputPath)$(ObfuscatedDir)')"
                Directories="$(OutputPath)$(ObfuscatedDir)" />

        <Exec
                Condition="$(ObfuscarGlobalToolExists) == 1 or $(ObfuscarGlobalToolExists) == 0"
                WorkingDirectory="$(OutputPath)"
                Command="$(ObfuscateCommand)"/>

        <ItemGroup>
            <_ModuleFile Include="$(OutputPath)$(TargetFileName)" />
            <_ModuleFileToBackup Include="$(OutputPath)$(TargetFileName).bak" />
            <_ModuleFileToCopy Include="$(OutputPath)$(ObfuscatedDir)\$(TargetFileName)" />
        </ItemGroup>
        <Copy SourceFiles="@(_ModuleFile)"
              DestinationFiles="@(_ModuleFileToBackup)"
              OverwriteReadOnlyFiles="True"
              SkipUnchangedFiles="True" />
        <Copy SourceFiles="@(_ModuleFileToCopy)"
              DestinationFolder="$(OutputPath)"
              OverwriteReadOnlyFiles="True"
              SkipUnchangedFiles="True" />
    </Target>
</Project>